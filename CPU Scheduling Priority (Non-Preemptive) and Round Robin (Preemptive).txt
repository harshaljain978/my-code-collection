import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

class MyProcess {
    int id, arrivalTime, burstTime, waitingTime, turnAroundTime, completionTime, priority, remainingTime;

    public MyProcess(int id, int arrivalTime, int burstTime, int priority) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
        this.remainingTime = burstTime; // Used in Round Robin
    }
}

public class SchedulingAlgorithms {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.print("\nEnter the number of processes: ");
            int n = sc.nextInt();

            MyProcess[] processes = new MyProcess[n];

            for (int i = 0; i < n; i++) {
                System.out.print("Enter arrival time, burst time, and priority of process " + (i + 1) + ": ");
                int arrivalTime = sc.nextInt();
                int burstTime = sc.nextInt();
                int priority = sc.nextInt();
                processes[i] = new MyProcess(i + 1, arrivalTime, burstTime, priority);
            }

            System.out.println("\nChoose Scheduling Algorithm:");
            System.out.println("1. Non-Preemptive Priority Scheduling");
            System.out.println("2. Round Robin Scheduling");
            System.out.println("3. Exit");

            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    nonPreemptivePriorityScheduling(processes, n);
                    break;
                case 2:
                    System.out.print("Enter time quantum: ");
                    int quantum = sc.nextInt();
                    roundRobinScheduling(processes, n, quantum);
                    break;
                case 3:
                    System.out.println("Exiting the program.");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    // Non-Preemptive Priority Scheduling
    private static void nonPreemptivePriorityScheduling(MyProcess[] processes, int n) {
        Arrays.sort(processes, Comparator.comparingInt((MyProcess p) -> p.arrivalTime)
                .thenComparingInt(p -> p.priority));

        int currentTime = 0;
        for (MyProcess process : processes) {
            if (currentTime < process.arrivalTime) {
                currentTime = process.arrivalTime;
            }
            process.completionTime = currentTime + process.burstTime;
            process.turnAroundTime = process.completionTime - process.arrivalTime;
            process.waitingTime = process.turnAroundTime - process.burstTime;
            currentTime += process.burstTime;
        }

        displayResults(processes, n, "Non-Preemptive Priority Scheduling");
    }

    // Round Robin Scheduling
    private static void roundRobinScheduling(MyProcess[] processes, int n, int quantum) {
        int currentTime = 0, completed = 0;
        while (completed < n) {
            boolean done = true;
            for (MyProcess process : processes) {
                if (process.arrivalTime <= currentTime && process.remainingTime > 0) {
                    done = false;
                    if (process.remainingTime > quantum) {
                        currentTime += quantum;
                        process.remainingTime -= quantum;
                    } else {
                        currentTime += process.remainingTime;
                        process.completionTime = currentTime;
                        process.turnAroundTime = process.completionTime - process.arrivalTime;
                        process.waitingTime = process.turnAroundTime - process.burstTime;
                        process.remainingTime = 0;
                        completed++;
                    }
                }
            }
            if (done) {
                currentTime++;
            }
        }
        displayResults(processes, n, "Round Robin Scheduling");
    }

    // Display results
    private static void displayResults(MyProcess[] processes, int n, String schedulingType) {
        System.out.println("\n" + schedulingType + " Results:");
        System.out.println("Process\tArrival Time\tBurst Time\tPriority\tCompletion Time\tWaiting Time\tTurnaround Time");

        int totalWT = 0, totalTAT = 0;
        for (MyProcess process : processes) {
            totalWT += process.waitingTime;
            totalTAT += process.turnAroundTime;
            System.out.println("P" + process.id + "\t\t" + process.arrivalTime + "\t\t" + process.burstTime + "\t\t" 
                               + process.priority + "\t\t" + process.completionTime + "\t\t" 
                               + process.waitingTime + "\t\t" + process.turnAroundTime);
        }

        System.out.println("\nAverage Waiting Time: " + (float) totalWT / n);
        System.out.println("Average Turnaround Time: " + (float) totalTAT / n);
    }
}
